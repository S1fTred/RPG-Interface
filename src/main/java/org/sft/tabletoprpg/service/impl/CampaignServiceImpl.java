package org.sft.tabletoprpg.service.impl;

import lombok.RequiredArgsConstructor;
import org.sft.tabletoprpg.domain.*;
import org.sft.tabletoprpg.domain.compositeKeys.CampaignMemberId;
import org.sft.tabletoprpg.repo.CampaignMemberRepository;
import org.sft.tabletoprpg.repo.CampaignRepository;
import org.sft.tabletoprpg.repo.CharacterRepository;
import org.sft.tabletoprpg.repo.UserRepository;
import org.sft.tabletoprpg.service.CampaignService;
import org.sft.tabletoprpg.service.dto.campaign.*;
import org.sft.tabletoprpg.service.exception.ConflictException;
import org.sft.tabletoprpg.service.exception.ForbiddenException;
import org.sft.tabletoprpg.service.exception.NotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class CampaignServiceImpl implements CampaignService {

    private final CampaignRepository campaignRepository;
    private final UserRepository userRepository;
    private final CampaignMemberRepository campaignMemberRepository;
    private final CharacterRepository characterRepository;

    @Transactional
    @Override
    public CampaignDto createCampaign(UUID gmId, CampaignCreateRequest req) {
        User gm = userRepository.findById(gmId)
            .orElseThrow(() -> new NotFoundException("–ì–µ–π–º-–º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        String name = req.name() == null ? null : req.name().trim();
        if (name == null || name.isEmpty()) {
            throw new ConflictException("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        Campaign campaign = toEntity(req);
        campaign.setName(name);
        campaign.setGm(gm);
        campaignRepository.save(campaign);

        // –î–æ–±–∞–≤–∏–º GM –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
        if (!campaignMemberRepository.existsByCampaign_IdAndUser_Id(campaign.getId(), gm.getId())) {
            CampaignMember cm = CampaignMember.builder()
                .id(new CampaignMemberId(campaign.getId(), gm.getId()))
                .campaign(campaign)
                .user(gm)
                .roleInCampaign(CampaignRole.GM)
                .build();
            campaignMemberRepository.save(cm);
        }
        return toDto(campaign);
    }

    @Transactional
    @Override
    public CampaignDto updateCampaign(UUID campaignId, UUID requesterId, CampaignUpdateRequest req) {
        Campaign campaign = campaignRepository.findById(campaignId)
            .orElseThrow(() -> new NotFoundException("–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        if (!campaign.getGm().getId().equals(requesterId)) {
            throw new ForbiddenException("–¢–æ–ª—å–∫–æ GM –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é");
        }

        if (req.name() != null) {
            String name = req.name().trim();
            if (name.isEmpty()) throw new ConflictException("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            campaign.setName(name);
        }
        if (req.description() != null) {
            campaign.setDescription(req.description().trim());
        }
        campaignRepository.save(campaign);
        return toDto(campaign);
    }

    @Transactional
    @Override
    public void deleteCampaign(UUID campaignId, UUID requesterId) {
        Campaign campaign = campaignRepository.findById(campaignId)
            .orElseThrow(() -> new NotFoundException("–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        if (!campaign.getGm().getId().equals(requesterId)) {
            throw new ForbiddenException("–¢–æ–ª—å–∫–æ GM –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∫–∞–º–ø–∞–Ω–∏—é");
        }
        if (characterRepository.existsByCampaign_Id(campaignId)) {
            throw new ConflictException("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é: –≤ –Ω–µ–π –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∏");
        }
        campaignRepository.delete(campaign);
    }

    @Transactional
    @Override
    public void addMember(UUID campaignId, UUID requesterId, AddMemberRequest req) {
        Campaign campaign = campaignRepository.findById(campaignId)
            .orElseThrow(() -> new NotFoundException("–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        if (!campaign.getGm().getId().equals(requesterId)) {
            throw new ForbiddenException("–¢–æ–ª—å–∫–æ GM –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
        }

        User user = userRepository.findById(req.userId())
            .orElseThrow(() -> new NotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // üö´ –±—ã–ª –±–∞–≥: –ø—Ä–æ–≤–µ—Ä—è–ª–∏ campaignRepository.existsByIdAndGm_Id(...)
        // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞:
        if (campaignMemberRepository.existsByCampaign_IdAndUser_Id(campaignId, user.getId())) {
            throw new ConflictException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –∫–∞–º–ø–∞–Ω–∏–∏");
        }

        // –ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ GM
        if (req.roleInCampaign() == CampaignRole.GM && !user.getId().equals(campaign.getGm().getId())) {
            throw new ForbiddenException("–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ GM. –ü–µ—Ä–µ–¥–∞–π—Ç–µ GM-—Å—Ç–≤–æ —è–≤–Ω–æ.");
        }

        CampaignMember campaignMember = CampaignMember.builder()
            .id(new CampaignMemberId(campaignId, user.getId()))
            .campaign(campaign)
            .user(user)
            .roleInCampaign(req.roleInCampaign())
            .build();

        campaignMemberRepository.save(campaignMember);
    }

    @Override
    public List<CampaignDto> findMyCampaigns(UUID gmId) {
        return findCampaignsByGm_Id(gmId);
    }

    @Override
    public List<CampaignDto> findCampaignsByGm_Id(UUID gmId) {
        return campaignRepository.findByGm_Id(gmId).stream()
            .map(this::toDto)
            .toList();
    }

    @Override
    public CampaignDto findCampaignById(UUID id) {
        Campaign campaign = campaignRepository.findById(id)
            .orElseThrow(() -> new NotFoundException("–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
        return toDto(campaign);
    }

    @Override
    public List<CampaignMemberDto> listMembers(UUID campaignId, UUID requesterId) {
        Campaign campaign = campaignRepository.findById(campaignId)
            .orElseThrow(() -> new NotFoundException("–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        // –î–æ—Å—Ç—É–ø: GM –∫–∞–º–ø–∞–Ω–∏–∏ (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º)
        if (!campaign.getGm().getId().equals(requesterId)) {
            throw new ForbiddenException("–¢–æ–ª—å–∫–æ GM –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
        }

        return campaignMemberRepository.findByCampaign_Id(campaignId).stream()
            .map(cm -> new CampaignMemberDto(
                cm.getUser().getId(),
                cm.getUser().getUsername(),
                cm.getUser().getEmail(),
                cm.getRoleInCampaign().name()
            ))
            .toList();
    }

    @Transactional
    @Override
    public void removeMember(UUID campaignId, UUID userId, UUID requesterId) {
        Campaign campaign = campaignRepository.findById(campaignId)
            .orElseThrow(() -> new NotFoundException("–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        if (!campaign.getGm().getId().equals(requesterId)) {
            throw new ForbiddenException("–¢–æ–ª—å–∫–æ GM –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
        }
        // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ GM
        if (userId.equals(campaign.getGm().getId())) {
            throw new ForbiddenException("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å GM –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏");
        }

        CampaignMemberId id = new CampaignMemberId(campaignId, userId);
        boolean exists = campaignMemberRepository.existsById(id);
        if (!exists) {
            throw new NotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–º–ø–∞–Ω–∏–∏");
        }
        campaignMemberRepository.deleteById(id);
    }

    // --------------------------- –ú–ê–ü–ü–ï–†–´ ------------------------------------- //
    private Campaign toEntity(CampaignCreateRequest req) {
        return Campaign.builder()
            .name(req.name())
            .description(req.description() == null ? null : req.description().trim())
            .build();
    }

    private CampaignDto toDto(Campaign campaign) {
        return CampaignDto.builder()
            .id(campaign.getId())
            .name(campaign.getName())
            .description(campaign.getDescription())
            .gmId(campaign.getGm().getId())
            .createdAt(campaign.getCreatedAt())
            .updatedAt(campaign.getUpdatedAt())
            .build();
    }
}
